Το ίδιο το πρόβλημα ορίζεται με βάση την αρχική κατάσταση από την οποία ξεκινάμε , την επιθυμητή τελική κατάσταση στην οποία πρέπει να καταλήξουμε ( ή πολλές δυνατές τελικές ) και το σύνολο των τελεστών μετάβασης , επιτρεπτών πράξεων δηλαδή που μπορούν να εκτελεστούν στα αντικείμενα μίας κατάστασης οδηγώντας σε μια άλλη ( π.χ . στην αναπαράσταση μίας παρτίδας σκάκι τελεστής είναι η έγκυρη μετακίνηση ενός πιονιού ) .
Λύση του προβλήματος είναι μία ακολουθία διαδοχικών τελεστών μετάβασης και καταστάσεων που ξεκινά από μία αρχική κατάσταση και καταλήγει σε μία τελική .
Ο πιο κατάλληλος τρόπος γραφικής αναπαράστασης του προβλήματος είναι ένας δενδρικός γράφος με ρίζα την αρχική κατάσταση , φύλλα τις τελικές καταστάσεις και τα αδιέξοδα , κόμβους τις ενδιάμεσες καταστάσεις και κλαδιά τους τελεστές μετάβασης .
Επέκταση ενός κόμβου ονομάζεται η εύρεση όλων των παιδιών του στο δένδρο μέσω της εφαρμογής σε αυτόν όλων των πιθανών τελεστών .
Οι λύσεις του προβλήματος είναι μονοπάτια από τη ρίζα σε κάποιο φύλλο του δένδρου που αντιστοιχεί σε τελική κατάσταση .
Σε πραγματικά προβλήματα το μέγεθος αυτού του δένδρου γίνεται εξαιρετικά μεγάλο μετά την επέκταση λίγων μόλις κόμβων και επομένως η αναζήτηση λύσεων σε ένα τέτοιο δένδρο καθίσταται εξαιρετικά χρονοβόρα .
Αυτό το ζήτημα στη βιβλιογραφία της ΤΝ αναφέρεται ως συνδυαστική έκρηξη .
Υπάρχει μία πλειάδα πραγματικών ή συνθετικών , απλών ή πολύπλοκων προβλημάτων που μπορούν να αναπαρασταθούν με χώρο καταστάσεων . Όλα τα προηγούμενα βρίσκουν εφαρμογή και το μόνο που αλλάζει σε κάθε πρόβλημα είναι οι λεπτομέρειες ( οι ιδιότητες των αντικειμένων , οι επιτρεπτοί τελεστές κλπ ) .
Προκειμένου ένα πρόγραμμα να επιλύσει ένα τέτοιο πρόβλημα πρέπει να αναπαραστήσει κατάλληλα και να κατασκευάσει το δένδρο των καταστάσεων , ξεκινώντας από τη ρίζα και επεκτείνοντας τους κόμβους μέχρι να φτάσει σε κάποια τελική κατάσταση .
Αν το ζητούμενο είναι να βρεθεί μία οποιαδήποτε λύση τότε το πρόγραμμα μπορεί τότε να τερματίσει επιστρέφοντας το μονοπάτι που οδηγεί στο τρέχον φύλλο , διαφορετικά ( εξαντλητική αναζήτηση ) μπορεί να αποθηκεύσει έναν δείκτη προς αυτό το φύλλο και να συνεχίσει την κατασκευή του δένδρου μέχρι να ανακαλύψει όλες τις πιθανές καταστάσεις που είναι προσβάσιμες από την αρχική , με τους διαθέσιμους τελεστές μετάβασης , και όλες τις πιθανές λύσεις .
Υπάρχει ένας γενικός αλγόριθμος αναζήτησης που εκτελεί αυτήν τη διερεύνηση και οι πραγματικοί αλγόριθμοι που χρησιμοποιούνται είναι παραλλαγές του που διαφέρουν στα βήματα 7 και 8 .
Στον αλγόριθμο αυτό Μέτωπο Αναζήτησης ( Μ.Α . ) είναι το σύνολο των καταστάσεων που έχουμε επισκεφθεί αλλά δεν έχουμε επεκτείνει και Κλειστό Σύνολο ( Κ.Σ . ) το σύνολο των καταστάσεων που και έχουμε επισκεφθεί και έχουμε επεκτείνει .
Το Κ.Σ . είναι απαραίτητο μόνο αν υπάρχει κίνδυνος παγίδευσης του αλγορίθμου σε ατέρμονα βρόχο λόγω απείρου μήκους κλαδιών στο δένδρο .
Οι διάφορες πραγματικές παραλλαγές αυτού του αλγορίθμου διακρίνονται σε αλγορίθμους τυφλής αναζήτησης , που διατάσσουν το Μ.Α . αποκλειστικά με βάση το χρόνο δημιουργίας κάθε κόμβου κατά την κατασκευή του δένδρου , και σε αλγορίθμους ευρετικής αναζήτησης ( heuristic search ) , όπου τα βήματα 7 και 8 εξαρτώνται από μία επιπλέον πληροφορία που υπολογίζεται σε πραγματικό χρόνο και που στις περισσότερες περιπτώσεις , αλλά όχι πάντα , είναι σχετικά ακριβής και αξιολογεί προσεγγιστικά τις καταστάσεις σε « καλές » και « κακές » . Ένα παράδειγμα ευρετικής πληροφορίας που μπορεί να αντιστοιχιστεί σε κάθε ενδιάμεση κατάσταση είναι η εκτιμώμενη « απόστασή » της ( με βάση ένα μέτρο που εξαρτάται από το πρόβλημα και την υλοποίηση ) από την τελική . Έτσι μπορούμε , φερ ' ειπείν , να κλαδεύουμε τα υποδένδρα με ρίζα « κακή » κατάσταση , αφαιρώντας τη ρίζα τους από το Μ.Α . προτού την επεκτείνουμε ( βήμα 7 ) .
Προφανώς αυτή η τακτική συμβάλλει στην αντιμετώπιση του φαινομένου της συνδυαστικής έκρηξης .
Μία άλλη κατηγοριοποίηση των αλγορίθμων γίνεται ανάλογα με τον τύπο του προβλήματος που επιλύουν : εκτός από τα συνηθισμένα που προαναφέρθηκαν , υπάρχουν και προβλήματα βελτιστοποίησης ( όπου σε κάθε τελεστή μετάβασης αντιστοιχίζεται μία τιμή κόστους και αναζητούμε τη λύση με το μονοπάτι που αθροιστικά έχει το ελάχιστο κόστος ) ή προβλήματα ικανοποίησης περιορισμών ( όπου η τελική κατάσταση δεν είναι πλήρως γνωστή , γνωρίζουμε όμως κάποιες ιδιότητες της και επιθυμούμε να καταλήξουμε σε μία κατάσταση που να τις διαθέτει ) .
Πληρότητα ενός αλγορίθμου αναζήτησης ονομάζεται το κατά πόσον βρίσκει πάντα μία λύση , εφ ' όσον τέτοια υπάρχει .
Οι σπουδαιότεροι αλγόριθμοι τυφλής αναζήτησης είναι ο DFS ( Depth-First Search ή αναζήτηση κατά βάθος ) και ο BFS ( Breadth-First Search ή αναζήτηση κατά πλάτος ) , οι οποίοι κατασκευάζουν το δένδρο ξεκινώντας από τη ρίζα και παράγοντας κόμβους , ο μεν DFS κατά βάθος ( ακολουθεί ένα κλαδί μέχρι να φτάσει σε φύλλο και μετά επεκτείνει έναν κόμβο προηγούμενου επιπέδου· αυτή η μέθοδος ονομάζεται « οπισθοδρόμηση » ) , ο δε BFS κατά πλάτος ( επεκτείνει πρώτα όλους τους κόμβους ενός επιπέδου , οι οποίοι έχουν το ίδιο βάθος , και μετά προχωρά στους κόμβους του επόμενου επιπέδου ) .
Προγραμματιστικά είναι σχεδόν ίδιοι μεταξύ τους , αλλά και με το γενικό αλγόριθμο που περιγράφηκε προηγουμένως , μόνο που διαφέρουν στο βήμα 8 ( το βήμα 7 δεν υπάρχει αφού δε γίνεται κλάδεμα ) : ο DFS τοποθετεί τους νέους κόμβους που προστίθενται στο Μ.Α . στην αρχή της λίστας ( LIFO στοίβα ) , ώστε στην επόμενη επανάληψη του βρόχου να επεκταθεί ένας από αυτούς , ενώ ο BFS τους τοποθετεί στο τέλος της λίστας ( FIFO ουρά ) , ώστε στην επόμενη επανάληψη του βρόχου να επεκταθεί ένας « αδελφός » του γονέα τους αν υπάρχει .
Ο BFS εγγυάται ότι θα βρει πρώτα τη λύση με την ελάχιστη απόσταση από τη ρίζα ( οπότε είναι ιδανικός και για προβλήματα βελτιστοποίησης όπου όλοι οι τελεστές έχουν ίσο κόστος ) και είναι πλήρης , το Μ.Α . όμως μπορεί να γιγαντωθεί για μεγάλους χώρους αναζήτησης και άρα έχει μεγάλες απαιτήσεις σε μνήμη .
Από την άλλη ο DFS είναι τυχαίο το ποια λύση θα βρει πρώτα και δεν είναι πλήρης , καθώς αν δε χρησιμοποιείται Κλειστό Σύνολο μπορεί να παγιδευτεί σε κλαδιά απείρου μήκους ( αφού ακολουθεί ένα κλαδί μέχρι να καταλήξει σε φύλλο ) .
Από την άλλη έχει μικρές απαιτήσεις σε μνήμη διατηρώντας πάντα μικρό το Μ.Α .
Συμβιβασμό μεταξύ αυτών των δύο αποτελεί ο αλγόριθμος ID ( Iterative Deepening ή επαναληπτική εκβάθυνση ) , ο οποίος είναι κατά βάση DFS αλλά προχωρά μέχρι ένα προκαθορισμένο βάθος , ενώ στη συνέχεια το επιτρεπτό βάθος αυξάνεται και ο αλγόριθμος ξεκινά από την αρχή χωρίς να διατηρεί δεδομένα από την προηγούμενη αναζήτηση .
Το δένδρο δηλαδή κατασκευάζεται διαρκώς από τη ρίζα , ξανά και ξανά , αλλά σε όλο και μεγαλύτερο βάθος .
Παρ ' όλο που ο ID εκτελεί πολλή περιττή εργασία αυτό δεν παίζει ρόλο σε μεγάλους χώρους αναζήτησης όσον αφορά την αλγοριθμική πολυπλοκότητα .
Ο αλγόριθμος είναι πλήρης γιατί δεν μπορεί να παγιδευτεί σε άπειρα κλαδιά , αφού το βάθος αναζήτησης είναι προκαθορισμένο , έχει τις μικρές απαιτήσεις μνήμης του DFS , ενώ αν το επιτρεπτό βάθος σε κάθε επανάληψη αυξάνεται κατά 1 εγγυάται ότι θα βρει πρώτα τη λύση με την ελάχιστη απόσταση από τη ρίζα ( όπως ο BFS , αφού αν υπήρχε καλύτερη λύση θα βρισκόταν σε προηγούμενη επανάληψη ) .
Οποιοσδήποτε από αυτούς τους αλγορίθμους μπορεί να χρησιμοποιηθεί με τη μέθοδο BiS ( Bidirectional Search ή αμφίδρομη αναζήτηση ) , η οποία μπορεί να εφαρμοστεί σε υπολογιστικό σύστημα με δύο επεξεργαστές όταν η τελική κατάσταση είναι πλήρως γνωστή και οι τελεστές μετάβασης είναι αντιστρέψιμοι : ο ένας επεξεργαστής εκτελεί αναζήτηση από την αρχική προς την τελική κατάσταση και ο άλλος από την τελική προς την αρχική . Όταν βρεθεί μία κοινή κατάσταση το πρόγραμμα ενώνει τα δύο μονοπάτια και επιστρέφει την τελική λύση· ιδανικά στο 1/2 του χρόνου που θα απαιτούσε μία μονόδρομη αναζήτηση .
Σε προβλήματα βελτιστοποίησης με τελεστές διαφορετικού ( αλλά πάντα θετικού ) κόστους μπορεί να εφαρμοστεί ο αλγόριθμος τυφλής αναζήτησης B & B ( Branch and Bound ή επέκταση και οριοθέτηση ) , ο οποίος μπορεί να βασιστεί είτε στον DFS είτε στον BFS προσφέροντας όμως επιπλέον κλάδεμα των καταστάσεων -και των αντίστοιχων υποδένδρων που θα προέκυπταν από την επέκταση τους- που αποκλείεται να οδηγούν σε λύση καλύτερη από την τρέχουσα .
Για να το πετύχει αυτό κρατά σε μία μεταβλητή Β το ολικό κόστος του μονοπατιού της βέλτιστης λύσης που έχει βρεθεί ως τώρα και , αν το μονοπάτι του τρέχοντος ενδιάμεσου κόμβου έχει κόστος μεγαλύτερο του Β , δεν τον αναπτύσσει και τον αφαιρεί από το Μέτωπο Αναζήτησης .
Στη χειρότερη περίπτωση δε θα γίνει κανένα κλάδεμα , αφού είναι θέμα τύχης η σειρά με την οποία θα ανακαλυφθούν οι λύσεις , και ο B & B λειτουργεί όπως ο DFS ή ο BFS .
Προκειμένου να μειωθεί ο , γιγάντιος για ρεαλιστικά προβλήματα , χώρος αναζήτησης και ο απαιτούμενος για την εύρεση της λύσης χρόνος , μπορούν να χρησιμοποιηθούν αλγόριθμοι που εκμεταλλεύονται ευρετικούς μηχανισμούς , δηλαδή στρατηγικές ( συνήθως συναρτήσεις που εξαρτώνται από το εκάστοτε πρόβλημα ) οι οποίες αξιολογούν προσεγγιστικά τις ενδιάμεσες καταστάσεις ως προς την εκτιμώμενη απόσταση τους από μία τελική κατάσταση , επεκτείνουν πρώτα αυτές με τη βέλτιστη ευρετική τιμή ( οι οποίες αναμένεται να οδηγήσουν συντομότερα σε λύση ) ή/και κλαδεύουν τις υπόλοιπες .
Οι ευρετικοί μηχανισμοί δεν είναι αντικειμενικοί και , παρόλο που κωδικοποιούνται αλγοριθμικά υπό τη μορφή της ευρετικής συνάρτησης , δεν μπορούν να θεωρηθούν αλγόριθμοι .
Αυτό γιατί , προκειμένου να μειώσουν το χώρο αναζήτησης ή να επιταχύνουν την εύρεση της λύσης , λειτουργούν προσεγγιστικά και « διαισθητικά » ( περίπου όπως οι άνθρωποι ) , ενώ οι αλγόριθμοι είναι ακριβείς και λειτουργούν πάντα ορθά .
Στην πλειονότητα των περιπτώσεων πάντως οι ευρετικές στρατηγικές οδηγούν σε πολύ καλά αποτελέσματα ( αναλόγως βέβαια του προβλήματος ) , ωστόσο απέχουν πολύ από το να προσομοιώνουν τους μηχανισμούς της ανθρώπινης σκέψης : η τελευταία χρησιμοποιεί επίσης ευρετικές μεθόδους οι οποίες όμως είναι ποιοτικές , όχι ποσοτικές / αριθμητικές όπως η ευρετική συνάρτηση , και φαίνεται να αποδίδουν καλύτερα . Ένας βασικός ευρετικός αλγόριθμος είναι ο HC ( Hill Climbing ή αναρρίχηση λόφων ) , ο οποίος μοιάζει με τον DFS αλλά σε κάθε επανάληψη κλαδεύει όλες τις καταστάσεις που προκύπτουν από μία επέκταση εκτός από την ευρετικά βέλτιστη ( δηλαδή κάθε στιγμή το Μ.Α . έχει μία κατάσταση ) και μεταβαίνει στην τελευταία μόνο αν έχει καλύτερη ευρετική τιμή από το γονέα της· διαφορετικά τερματίζει έχοντας βρει μία τοπικά βέλτιστη λύση .
Προφανώς ο HC δεν είναι πλήρης αλλά είναι πολύ γρήγορος και καθόλου μνημοβόρος .
Υπάρχουν διάφορες παραλλαγές του που θυσιάζουν λίγη από την ταχύτητα του προκειμένου να αυξήσουν την πιθανότητα του να βρει λύση .
Μία παραλλαγή είναι ο EHC ( Enforced Hill Climbing ή εξαναγκασμένη αναρρίχηση λόφων ) , στον οποίον διατηρούνται στο Μ.Α . τα αδέρφια του τρέχοντος κόμβου και , αν η επέκταση του τελευταίου δεν οδηγήσει σε μετάβαση , αντί ο αλγόριθμος να τερματίσει εκτελεί μία αναζήτηση κατά πλάτος στα αδέρφια του μέχρι να βρεθεί μία καλύτερη κατάσταση οπότε και συνεχίζεται η αναρρίχηση από εκεί .
Επίσης δημοφιλής είναι και ο SA ( Simulated Annealing ή προσομοιωμένη ανόπτηση ) , ο οποίος δίνει μία πιθανότητα μετάβασης σε χειρότερες καταστάσεις ( p ) , αφήνοντας έτσι περιθώριο στην αναζήτηση να ξεφύγει από τοπικά βέλτιστα .
Αν η πιθανότητα p τείνει στο 0 ο SA λειτουργεί όπως ο HC .
Επίσης υπάρχει ο TS ( Taboo Search ή αναζήτηση με απαγορεύσεις ) , όπου σε κάθε επέκταση γίνεται πάντα μετάβαση στο καλύτερο παιδί , ακόμα και αν είναι χειρότερη κατάσταση από την τρέχουσα , και η αναζήτηση συμβουλεύεται μία λίστα απαγορευμένων καταστάσεων ( παρόμοιας λειτουργικότητας με το Κλειστό Σύνολο αλλά σταθερού μεγέθους ) .
Ο BS ( Beam Search ή ακτινωτή αναζήτηση ) , όπου ένας σταθερός αριθμός εκ των καλύτερων καταστάσεων παραμένει στο Μ.Α . δίνοντας τη δυνατότητα οπισθοδρόμησης αν χρειαστεί , είναι μία ακόμα επέκταση του κεντρικού αλγορίθμου αναρρίχησης λόφων . Όλοι αυτοί οι ευρετικοί αλγόριθμοι κατάγονται από τη θεωρία μαθηματικής βελτιστοποίησης , όπου αναπτύχθηκαν για να εντοπίζουν το ελάχιστο ή το μέγιστο μίας πραγματικής συνάρτησης διακριτής μεταβλητής .
Στην επίλυση προβλημάτων τον ρόλο της τελευταίας προφανώς τον παίζει η ευρετική συνάρτηση και ο χώρος των λύσεων οπτικοποιείται ως ένα γεωγραφικό « τοπίο » : όσο περισσότερο δύο λύσεις διαφέρουν τόσο απέχουν μεταξύ τους σε αυτό το τοπίο , ενώ όσο καλύτερη ευρετική τιμή έχει μία λύση τόσο υψηλότερα από το επίπεδο του « εδάφους » τοποθετείται σε αυτό το τοπίο .
Το τελευταίο , καθώς οι υποψήφιες καταστάσεις είναι διακριτές μεταξύ τους , ουσιαστικά είναι ένας γράφος με κορυφές τις καταστάσεις και ακμές τους τελεστές μετάβασης .
Η παραλλαγή της αναρρίχησης λόφων σε συνεχή χώρο , με στόχο την εύρεση ακρότατου μιας συνάρτησης συνεχούς μεταβλητής , ονομάζεται άνοδος κλίσης ( gradient ascent , αν η συνάρτηση εκφράζει βελτιστότητα και αναζητείται το μέγιστό της ) ή κάθοδος κλίσης ( gradient descent , αν η συνάρτηση εκφράζει σφάλμα / απόκλιση από το βέλτιστο και αναζητείται το ελάχιστό της ) και υλοποιείται με μεθόδους του απειροστικού λογισμού . Άλλος δημοφιλής ευρετικός αλγόριθμος είναι ο BestFS ( αναζήτηση πρώτα στο καλύτερο ) ο οποίος κρατά όλες τις καταστάσεις στο Μ.Α . και μοιάζει με τον BFS , μόνο που σε κάθε επέκταση εφαρμόζει τον ευρετικό μηχανισμό και στην επόμενη επανάληψη μεταβαίνει στο ευρετικά βέλτιστο παιδί .
Είναι πλήρης , μνημοβόρος και δεν εγγυάται ότι θα βρει τη βέλτιστη λύση αφού εξαρτάται απόλυτα από την εγκυρότητα των εκτιμήσεων της ευρετικής συνάρτησης .
Τροποποίηση του BestFS αποτελεί ο πλήρης και βέλτιστος αλγόριθμος Α * , στον οποίον η ευρετική τιμή που αντιστοιχίζεται σε κάθε νέα κατάσταση Κ για να την αξιολογήσει ο μηχανισμός δεν είναι μόνο μία εκτίμηση Α της απόστασης της από μία τελική κατάσταση , αλλά το άθροισμα Α συν την ακριβή απόσταση της Κ από τη ρίζα .
Ο Α * εγγυάται ότι θα βρει τη βέλτιστη λύση αρκεί η ευρετική συνάρτηση να είναι πάντα υποεκτίμηση της πραγματικής απόστασης από τη λύση και ποτέ υπερεκτίμηση ( « αποδεκτή συνάρτηση » ) .
Σε περίπτωση που είναι σπουδαιότερη η ταχύτητα παρά η βελτιστότητα δε χρειάζεται η ευρετική συνάρτηση να είναι αποδεκτή .
Παραλλαγή του Α * αποτελεί ο IDA * ( A * με επαναληπτική εκβάθυνση ) ο οποίος αναπτύσσει το δένδρο αναζήτησης κατά βάθος σε διαδοχικές επαναλήψεις , αξιοποιώντας την ευρετική συνάρτηση του Α * για να επιλέξει την επεκτεινόμενη κάθε φορά κατάσταση , αλλά όταν η ευρετική τιμή μίας νέας κατάστασης ξεπερνά το όριο που έχει τεθεί για την τρέχουσα επανάληψη όλο το υποδένδρο το οποίο ξεκινά από αυτήν κλαδεύεται .