Μία υβριδική αρχιτεκτονική , η οποία επιτρέπει εύκολη εκτέλεση προγραμμάτων κοινού χώρου διευθύνσεων σε πολυυπολογιστές , είναι η κατανεμημένη κοινή μνήμη , στην οποία εξειδικευμένο υλικό ( ελεγκτές μνήμης ) παρέχει διαφανώς την ψευδαίσθηση ενιαίου χώρου διευθύνσεων στο λογισμικό που εκτελείται σε κάθε κόμβο .
Στα συστήματα αυτά , φυσικά κατανεμημένης αλλά λογικά ενιαίας μνήμης , ένας κόμβος προσπελαύνει πολύ γρηγορότερα τα δεδομένα που είναι αποθηκευμένα στην τοπική του μνήμη απ ' ό , τι τα δεδομένα που βρίσκονται σε κάποιον απομακρυσμένο κόμβο και γι ' αυτό λέγονται συστήματα Ανομοιόμορφης Πρόσβασης Μνήμης ( NUMA ) .
Στους υπολογιστές αυτούς συνήθως εκτελείται ένας μόνο πυρήνας λειτουργικού συστήματος ο οποίος γνωρίζει , για λόγους βελτιστοποίησης των επιδόσεων , τις λεπτομέρειες της υποκείμενης αρχιτεκτονικής NUMA .
Στους πολυεπεξεργαστές η μνήμη συνήθως διασπάται σε πολλαπλά τμήματα προκειμένου να επιτρέπονται ταυτόχρονες προσπελάσεις σε αυτά από διαφορετικούς επεξεργαστές ( χωρίς αυτό να αναιρεί φυσικά την ύπαρξη ενιαίου χώρου διευθύνσεων ) , ενώ το δίκτυο διασύνδεσης είναι στην απλούστερη περίπτωση ένας δίαυλος , δηλαδή ένα κοινό μέσο μετάδοσης το οποίο κάθε δεδομένη στιγμή μόνο ένας επεξεργαστής μπορεί να χρησιμοποιεί για επικοινωνία με κάποιο τμήμα μνήμης .
Ως εκ τούτου οι πολυεπεξεργαστές διαύλου δεν παρουσιάζουν επαρκή κλιμακωσιμότητα , καθώς ο δίαυλος δεν διαθέτει αρκετή χωρητικότητα ώστε να εξυπηρετεί ταυτόχρονα αιτήσεις από πολλούς διαφορετικούς επεξεργαστές .
Αυτό συνεπάγεται ότι οι επιδόσεις δεν αυξάνονται αναλογικά με το πλήθος των επεξεργαστών , αφού με την προσθήκη νέων επεξεργαστών πολλαπλασιάζονται τα διαστήματα αναμονής του καθενός για κατάληψη του διαύλου .
Η λύση του διαύλου πάντως είναι η απλούστερη καθώς οι συνήθεις σειριακοί υπολογιστές έτσι κι αλλιώς διαθέτουν έναν δίαυλο για την επικοινωνία του επεξεργαστή με τη μνήμη και τις μονάδες Εισόδου / Εξόδου .
Αν ωστόσο χρειαζόμαστε ένα σύστημα με περισσότερες από 10-20 CPU πρέπει να καταφύγουμε σε δίκτυα μεταγωγής , όπου μεταξύ κάθε επεξεργαστή και κάθε τμήματος της μνήμης δημιουργείται μία μοναδική διαδρομή .
Ανεξάρτητα από το είδος της διασύνδεσης , για την αύξηση των επιδόσεων και την αποφυγή υπερφόρτωσης του δικτύου , κάθε CPU διαθέτει τη δική της τοπική κρυφή μνήμη .
Στα παράλληλα συστήματα όμως παρουσιάζεται το λεγόμενο « πρόβλημα της συνεκτικότητας » ( cache coherence ) : ένα κοινόχρηστο δεδομένο που έχει αντιγραφεί σε πολλές κρυφές μνήμες μπορεί να τροποποιηθεί ανεξάρτητα στην καθεμία χωρίς να το γνωρίζει η κύρια ή οι άλλες κρυφές μνήμες , με αποτέλεσμα να υπάρχει ασάφεια ως προς το ποια είναι η σωστή τιμή του κάθε στιγμή .
Το πρόβλημα αυτό επιλύεται στην περίπτωση ύπαρξης διαύλου με « πρωτόκολλα παρακολούθησης » , όπου το υλικό κάθε επεξεργαστή παρακολουθεί όλη την πληροφορία που διακινείται στο κοινό μέσο και δρα ανάλογα , ενώ στην περίπτωση δικτύου μεταγωγής με « πρωτόκολλα καταλόγων » , στους οποίους κάθε τμήμα της μνήμης διατηρεί έναν πίνακα με πληροφορίες για το ποιοι επεξεργαστές έχουν κάθε δεδομένο στην κρυφή τους μνήμη ώστε όποτε χρειάζεται να γίνονται οι κατάλληλες ενημερώσεις .
Σε κάθε περίπτωση πάντως τα πρωτόκολλα συνεκτικότητας επιβαρύνουν το σύστημα , αφού αυξάνουν την κίνηση στο δίκτυο διασύνδεσης , με το πρόβλημα να μειώνεται ( όχι όμως να απαλείφεται ) μόνο αν καταβληθεί προσπάθεια ώστε τα παράλληλα προγράμματα να μην τροποποιούν συχνά κοινόχρηστα δεδομένα .
Τα παράλληλα συστήματα κοινής μνήμης με δίαυλο στα οποία όλες οι CPU είναι ισότιμες και μπορούν όλες να αναλάβουν την εκτέλεση του λειτουργικού συστήματος ονομάζονται « συμμετρικοί πολυεπεξεργαστές » ( SMP ) .
Πάντως ακόμη και οι πολυεπεξεργαστές μεταγωγής στην πράξη έχουν περιορισμένη κλιμακωσιμότητα λόγω τετραγωνικά αυξανόμενου ως προς το πλήθος των επεξεργαστών κόστους κατασκευής του δικτύου διασύνδεσης , με αποτέλεσμα αν χρειαζόμαστε ένα σύστημα με παραπάνω από 64 CPU συνήθως να καταφεύγουμε σε πολυυπολογιστές .
Οι πολυυπολογιστές εμφανίζονται σε διάφορες εκδοχές αλλά σε κάθε περίπτωση πρόκειται για μία συλλογή ανεξάρτητων υπολογιστών ( είτε απλώς πακέτα επεξεργαστή / ιδιωτικής μνήμης , είτε πλήρη και αυτοτελή συστήματα ) που επικοινωνούν μεταξύ τους μέσω ενός δικτύου διασύνδεσης ( είτε δίκτυο διαύλου είτε δίκτυο μεταγωγής ) .
Οι κόμβοι μπορούν μεταξύ τους να είναι είτε ίδιοι ( « ομοιογενείς πολυυπολογιστές » ) , είτε διαφορετικοί ( « ετερογενείς πολυυπολογιστές » ) .
Το δίκτυο διασύνδεσης μπορεί να είναι : Σε κάθε περίπτωση , από τη στιγμή που το λογισμικό εξασφαλίζει για τους χρήστες συνεκτική εικόνα των πόρων του πολυυπολογιστή και την ψευδαίσθηση ενός μοναδικού συστήματος , έστω και στο πλαίσιο μίας μόνο εφαρμογής , κάνουμε λόγο για κατανεμημένο σύστημα .
Στους εξειδικευμένους πολυυπολογιστές υψηλής απόδοσης κάθε κόμβος επικοινωνεί με το δίκτυο διασύνδεσης μέσω ενός δρομολογητή , ενός μικρού κυκλώματος μεταγωγής με το οποίο δρομολογούνται πακέτα δεδομένων ( μηνύματα ) από έναν κόμβο σε έναν άλλον ( πιθανώς διερχόμενα από ενδιάμεσους σταθμούς σε περίπτωση δικτύου μεταγωγής ) .
Το ίδιο το δίκτυο μπορεί να έχει διάφορες τοπολογίες ( δίαυλος , πλέγμα , υπερκύβος κ.λπ . ) ενώ η μορφή των μηνυμάτων καθορίζεται από εξειδικευμένα πρωτόκολλα ( ανάλογα με τον κατασκευαστή ) . Ένας τέτοιος πολυυπολογιστής μοιάζει πολύ με ένα ιδιότυπο τοπικό δίκτυο υπολογιστών , στο οποίο η τοπολογία είναι αυστηρά στατική , οι αποστάσεις πολύ μικρές και η ανάγκη για ταχύτητα εξαιρετικά αυξημένη .
Ως εκ τούτου οι δρομολογητές , οι οποίοι παίζουν ταυτόχρονα τον ρόλο των καρτών δικτύου ενός συνήθους LAN και των δρομολογητών ενός WAN , έχουν όλη τη λειτουργικότητά τους τυπωμένη σε κυκλώματα υλικού ώστε να ελαχιστοποιούνται οι καθυστερήσεις , ενώ οι αλγόριθμοι δρομολόγησης που υλοποιούν είναι εξαιρετικά απλοί και ταχείς . Ένας άλλος τύπος πολυυπολογιστή είναι μία συστάδα , ένα πραγματικό LAN ή WAN στο οποίο κάθε κόμβος είναι ένας πλήρης υπολογιστής , το δίκτυο διασύνδεσης ταυτίζεται με ένα σύνηθες δίκτυο υπολογιστών και τα χρησιμοποιούμενα πρωτόκολλα είναι αυτά της τυπικής στοίβας TCP/IP .
Τόσο στις συστάδες όσο και στα συστήματα κατανεμημένης κοινής μνήμης που προαναφέρθηκαν το σύνηθες είναι κάθε κόμβος να αποτελεί έναν πλήρη συμμετρικό πολυεπεξεργαστή , οπότε το δίκτυο διασύνδεσης μοιάζει κατά κάποιον τρόπο με WAN και κάθε κόμβος με αυτόνομο LAN που συμμετέχει στο ολικό δίκτυο μέσω του δρομολογητή του .
Με αυτόν τον τρόπο η ικανότητα κλιμάκωσης του ολικού συστήματος αυξάνεται κατά πολύ .
Σε πολυυπολογιστές κατανεμημένης κοινής μνήμης μπορούν να χρησιμοποιηθούν κρυφές μνήμες σε κάθε κόμβο για την αύξηση των επιδόσεων αλλά έτσι εμφανίζεται πάλι , σε διαφορετικό πλαίσιο , το προαναφερθέν πρόβλημα της συνεκτικότητας .
Αντιμετωπίζεται με πρωτόκολλα καταλόγων , αφού συνήθως δεν υπάρχει κοινό μέσο , ενώ όταν κάθε σταθμός είναι συμμετρικός πολυεπεξεργαστής διαύλου χρησιμοποιείται ένα τέτοιο « εξωτερικό » πρωτόκολλο για το ολικό δίκτυο και ένα « εσωτερικό » πρωτόκολλο παρακολούθησης σε κάθε κόμβο .
Η ανάπτυξη εφαρμογών σε συστήματα κοινής και κατανεμημένης κοινής μνήμης συνήθως γίνεται με τη βοήθεια λογισμικού συστήματος για κατασκευή , χειρισμό και συντονισμό πολλαπλών διεργασιών ή / και νημάτων , ή με API όπως το OpenMP , ένα υψηλού επιπέδου πρότυπο κατασκευής βιβλιοθηκών , επεκτάσεων μεταγλωττιστή και μεταβλητών περιβάλλοντος με υλοποιήσεις για διάφορους συνδυασμούς επεξεργαστή / λειτουργικού συστήματος / γλώσσας προγραμματισμού , το οποίο βασίζεται στην κοινή μνήμη του ενιαίου χώρου διευθύνσεων για τη διαδιεργασιακή / διανηματική επικοινωνία .
Στην πλειονότητα των περιπτώσεων το OpenMP υλοποιείται εσωτερικά με τα συνήθη νήματα του προτύπου POSIX των λειτουργικών συστημάτων Unix , τα οποία ( όπως και οι μέθοδοι χειρισμού διεργασιών και διαδιεργασιακής επικοινωνίας του POSIX ) προγραμματίζονται με τον ίδιο τρόπο σε έναν σειριακό υπολογιστή και σε έναν πολυεπεξεργαστή για την κατασκευή εφαρμογών που εκμεταλλεύονται τον ταυτοχρονισμό .
Στον πολυεπεξεργαστή ωστόσο ο πυρήνας αυτομάτως χρονοπρογραμματίζει καταλλήλως τα νήματα ή τις διεργασίες ώστε , αν είναι εφικτό , να εκτελούνται παράλληλα σε διαφορετικούς επεξεργαστές , ενώ στον σειριακό υπολογιστή όλα τα νήματα ή διεργασίες εκτελούνται σειριακά και ψευδοπαράλληλα στον ίδιο επεξεργαστή χωρίς να υπάρχει πραγματικός παραλληλισμός .
Στους πολυυπολογιστές από την άλλη βρίσκει εφαρμογή το MPI , ένα πρότυπο κατασκευής βιβλιοθηκών για την επικοινωνία παράλληλων διεργασιών μέσω ρητής ανταλλαγής μηνυμάτων .
Εσωτερικά , στις περισσότερες υλοποιήσεις της , η βιβλιοθήκη του MPI καλεί το API δικτυακού προγραμματισμού των υποδοχών ( sockets ) αλλά είναι υψηλότερου επιπέδου από αυτό , προσανατολίζεται αποκλειστικά σε πολυυπολογιστικά κατανεμημένα συστήματα , παρέχει πιο εξελιγμένες δυνατότητες και διατίθεται σε διάφορες εκδόσεις βελτιστοποιημένες για πολυυπολογιστές με συγκεκριμένη τοπολογία δικτύου διασύνδεσης ( Ethernet , υπερκύβος , πλέγμα κλπ , ή ακόμη και σε εκδόσεις για πολυεπεξεργαστές κοινής μνήμης ) .
Με το MPI ο υπολογισμός κατανέμεται σε ένα σύνολο πανομοιότυπων διεργασιών , σειριακά αριθμημένων , που εκτελούνται σε διαφορετικούς κόμβους και ο κώδικάς τους διαφοροποιείται ρητά ανάλογα με τον σειριακό αριθμό τους .
Το MPI είναι προσανατολισμένο στη μεγιστοποίηση των επιδόσεων και γι ' αυτό συνήθως εξετάζεται στα πλαίσια της παράλληλης και όχι της κατανεμημένης επεξεργασίας .
Συνήθως ένας αλγόριθμος παραλληλοποιείται με διάσπασή του σε πολλαπλά τμήματα τα οποία ανατίθενται σε ξεχωριστά νήματα ή διεργασίες και έτσι εκτελούνται παράλληλα σε διαφορετικές επεξεργαστικές μονάδες .
Στο μοντέλο κοινού χώρου διευθύνσεων μπορούν να ανακύψουν ζητήματα αμοιβαίου αποκλεισμού αλλά και συγχρονισμού , τα οποία πρέπει να αντιμετωπιστούν προγραμματιστικά .
Εκ φύσεως στο μοντέλο μεταβίβασης μηνυμάτων ανακύπτουν μόνο αλγοριθμικά ζητήματα συγχρονισμού , αφού δεν υπάρχουν κοινόχρηστες μεταβλητές .
Ο νόμος του Άμνταλ χρησιμοποιείται για να διαπιστωθεί η αναμενόμενη μείωση του χρόνου εκτέλεσης από την παραλληλοποίηση ενός σειριακού προγράμματος .
Φέρει το όνομα του Τζιν Άμνταλ που τον πρωτοδιατύπωσε και δηλώνει ότι η επιτάχυνση ενός προγράμματος το οποίο αξιοποιεί πολλαπλούς επεξεργαστές περιορίζεται από τον χρόνο εκτέλεσης που απαιτεί το σειριακό μέρος του προγράμματος .
Ο νόμος του Άμνταλ συνήθως ορίζεται με τη βοήθεια του παρακάτω μαθηματικού τύπου : Στον τύπο αυτόν η μεταβλητή P δηλώνει το ποσοστό των συνολικών υπολογισμών του προγράμματος οι οποίοι μπορούν να παραλληλοποιηθούν και η μεταβλητή Ν το πλήθος των διαθέσιμων επεξεργαστών .
Για παράδειγμα , αν το P είναι 90 % ( 0,9 ) , τότε το ( 1-P ) είναι 10 % και το ολικό πρόγραμμα ( σύμφωνα με τον τύπο του Άμνταλ ) μπορεί να επιταχυνθεί το πολύ 10 φορές , όσους επεξεργαστές και αν χρησιμοποιήσουμε .
Γι ' αυτόν τον λόγο η παράλληλη επεξεργασία είναι χρήσιμη μόνο για περιορισμένο πλήθος επεξεργαστών ( μικρό N ) ή για προβλήματα με πολύ μεγάλη τιμή P ( π.χ . η πρόσθεση δύο ν-διάστατων διανυσμάτων έχει P 100 % , αφού πρακτικώς δεν υπάρχει αποκλειστικά σειριακό τμήμα στον αλγόριθμο ) .
Στις περισσότερες περιπτώσεις ένα παράλληλο πρόγραμμα έχει σχεδιαστεί κατάλληλα και ο πηγαίος κώδικας έχει γραφεί από τον προγραμματιστή έτσι ώστε να υποστηρίζει παραλληλισμό ( « ρητός παραλληλισμός » ) .
Επειδή η διαδικασία αυτή είναι επίπονη , χρονοβόρα και απαιτεί ειδικές γνώσεις εκ μέρους του προγραμματιστή , έχουν υπάρξει πολλές προσπάθειες για την αυτόματη παραλληλοποίηση τμημάτων σειριακού πηγαίου κώδικα ( συνήθως επαναληπτικών βρόχων ) από κατάλληλους μεταγλωττιστές .
Στην περίπτωση αυτή ο προγραμματιστής συγγράφει τυπικό σειριακό κώδικα , χωρίς κλήσεις σε κάποια υποστηρικτική βιβλιοθήκη όπως των νημάτων POSIX , του OpenMP ή του MPI , και κατά τη μεταγλώττιση εντοπίζονται αυτομάτως τα σημεία που επιδέχονται παραλληλισμό .
Πέρα από τις , συμπληρωματικές μεταξύ τους , λύσεις της αυτόματης παραλληλοποίησης και της προσθήκης εξειδικευμένων βιβλιοθηκών και επεκτάσεων σε συνήθεις γλώσσες προγραμματισμού όπως η C ή η Fortran , κατά καιρούς έχουν εμφανιστεί και ορισμένες γλώσσες προγραμματισμού σχεδιασμένες από τη βάση τους με στόχο την εγγενή υποστήριξη ταυτοχρονισμού , είτε παράλληλου είτε ψευδοπαράλληλου .
Ακόμη και συνηθισμένες γλώσσες γενικού σκοπού παρέχουν κάποια στοιχειώδη εγγενή υποστήριξη για ταυτοχρονισμό και αμοιβαίο αποκλεισμό ( π.χ . η Java και η C # ) , αλλά οι εξειδικευμένες γλώσσες ταυτόχρονου προγραμματισμού είναι βελτιστοποιημένες συγκεκριμένα προς αυτή την κατεύθυνση .
Τα μη συνεκτικά κατανεμημένα συστήματα εκτελούνται συνήθως σε ετερογενείς δικτυωμένους πολυυπολογιστές και βασίζονται σε λογισμικό το οποίο παρέχει υπηρεσίες σε χρήστες , αποκρύπτοντας όμως την ύπαρξη πολλαπλών υπολογιστών και τη χρήση του υποκείμενου δικτύου ( διαφάνεια ) .
Το δίκτυο διασύνδεσης ποικίλει , από την κλίμακα ενός τοπικού Ethernet ( π.χ . για τις ανάγκες μίας επιχείρησης ή ενός πανεπιστημιακού τμήματος ) μέχρι την κλίμακα του Διαδίκτυο .
Στόχος αυτών των συστημάτων συνήθως είναι η διαφανής παροχή κάποιας υπηρεσίας ( π.χ . διαμοιρασμός πόρων μεταξύ απομακρυσμένων χρηστών , αυτόματη μετάφραση κειμένου μέσω Διαδικτύου κλπ ) , αλλά σπανιότερα μπορούν να αξιοποιηθούν και για αύξηση των υπολογιστικών επιδόσεων κατά την επίλυση ενός προβλήματος ( π.χ . υπολογιστικά πλέγματα , αν και γι ' αυτόν τον σκοπό χρησιμοποιούνται κυρίως πολυεπεξεργαστές ή συνεκτικοί πολυυπολογιστές με τοπικά δίκτυα διασύνδεσης χαμηλής υστέρησης ) .
Συνήθως η εργασία που επιτελεί ένα τέτοιο κατανεμημένο σύστημα μπορεί να γίνει και από ένα συγκεντρωτικό σύστημα ( π.χ . έναν κεντρικό υπολογιστή στον οποίον συνδέονται οι πελάτες μέσω δικτύου ) .
Ωστόσο τα κατανεμημένα συστήματα πλεονεκτούν έναντι των συγκεντρωτικών ως προς : Με την εμφάνιση των κατανεμημένων συστημάτων προέκυψαν ζητήματα λογισμικού , αφού έπρεπε να γραφούν κατάλληλες γλώσσες προγραμματισμού , λειτουργικά συστήματα και εφαρμογές που να υποστηρίζουν αυτό το μοντέλο , ζητήματα δικτύωσης , αφού είναι αναγκαία η ύπαρξη δικτύου και αν το δίκτυο καταρρεύσει ή κορεστεί καταρρέει και το σύστημα , και ασφάλειας δεδομένων . Ένα κατανεμημένο σύστημα είναι ανοιχτό , παρέχει δηλαδή υπηρεσίες σύμφωνα με συγκεκριμένους γνωστούς κανόνες , έχει επαρκή κλιμακωσιμότητα και προσφέρει στους χρήστες του κάποιους ή όλους από τους παρακάτω τύπους διαφάνειας : Προκειμένου να παρουσιάζει ένα κατανεμημένο σύστημα καλή κλιμακωσιμότητα ως προς το πλήθος των κόμβων , συνήθως αποφεύγονται κατά την κατασκευή του οι συγκεντρωτικοί αλγόριθμοι , οι συγκεντρωτικές δομικές μονάδες και οι συγκεντρωτικοί πίνακες .
Προτιμώνται κατανεμημένοι αλγόριθμοι , χωρίς συγχρονισμένο καθολικό ρολόι και όπου οι κόμβοι είναι ισότιμοι και παίρνουν αποφάσεις στηριζόμενοι μόνο σε αποσπασματικές , τοπικά διαθέσιμες πληροφορίες για το σύστημα . Έτσι ο φόρτος εργασίας δεν αυξάνει ανάλογα με το πλήθος των κόμβων και αποφεύγεται η κατάρρευση του συστήματος όταν καταρρέει ένας κόμβος . Όμως ζητήματα κλιμακωσιμότητας προκύπτουν και λόγω των περιορισμών του δικτύου ή των διακομιστών . Ένας κόμβος του συστήματος πρέπει να αποκρύπτει από τον χρήστη τις πιθανές καθυστερήσεις επικοινωνίας όσο μπορεί , π.χ . μεταφέροντας ένα μέρος των υπολογισμών από τον διακομιστή στον πελάτη ή επικαλύπτοντας επικοινωνία και υπολογισμό , ενώ επιτυχημένες μέθοδοι για την αντιμετώπιση του ζητήματος είναι η αντιγραφή ( replication ) , δηλαδή η δημιουργία πολλαπλών αντιγράφων ενός πόρου και η διανομή τους σε ποικίλους κόμβους ώστε να αυξηθεί η διαθεσιμότητα ( και επομένως η ανοχή σφαλμάτων ή οι υπολογιστικές επιδόσεις ) , και η διανομή , ο διαχωρισμός ενός συστατικού σε μικρότερα και η διαμοίρασή τους στο σύστημα .